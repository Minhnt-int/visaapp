// API Mock functions ƒë·ªÉ simulate vi·ªác g·ªçi database

export interface VisaCountryItem {
  id: string;
  name: string;
  slug: string;
  categoryId: string;
  categoryName: string;
  categorySlug: string;
  flag: string;
  isActive: boolean;
  order: number;
  createdAt: string;
  updatedAt: string;
}

export interface VisaCategory {
  id: string;
  name: string;
  slug: string;
  isActive: boolean;
  order: number;
}

// Mock data cho c√°c danh m·ª•c visa (c·ªë ƒë·ªãnh)
const mockVisaCategories: VisaCategory[] = [
  {
    id: "cat-001",
    name: "Visa Ch√¢u √Å",
    slug: "visa-chau-a",
    isActive: true,
    order: 1
  },
  {
    id: "cat-002", 
    name: "Visa Ch√¢u √Çu",
    slug: "visa-chau-au",
    isActive: true,
    order: 2
  },
  {
    id: "cat-003",
    name: "Visa Ch√¢u M·ªπ", 
    slug: "visa-chau-my",
    isActive: true,
    order: 3
  },
  {
    id: "cat-004",
    name: "Visa Ch√¢u √öc",
    slug: "visa-chau-uc",
    isActive: true,
    order: 4
  }
];

// Mock data cho c√°c n∆∞·ªõc visa (s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ API)
const mockVisaCountries: VisaCountryItem[] = [
  // Ch√¢u √Å
  {
    id: "country-001",
    name: "H√†n Qu·ªëc",
    slug: "han-quoc",
    categoryId: "cat-001",
    categoryName: "Visa Ch√¢u √Å",
    categorySlug: "visa-chau-a", 
    flag: "üá∞üá∑",
    isActive: true,
    order: 1,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-002",
    name: "Nh·∫≠t B·∫£n", 
    slug: "nhat-ban",
    categoryId: "cat-001",
    categoryName: "Visa Ch√¢u √Å",
    categorySlug: "visa-chau-a",
    flag: "üáØüáµ", 
    isActive: true,
    order: 2,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-003",
    name: "Trung Qu·ªëc",
    slug: "trung-quoc", 
    categoryId: "cat-001",
    categoryName: "Visa Ch√¢u √Å",
    categorySlug: "visa-chau-a",
    flag: "üá®üá≥",
    isActive: true,
    order: 3,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-004",
    name: "Singapore",
    slug: "singapore",
    categoryId: "cat-001", 
    categoryName: "Visa Ch√¢u √Å",
    categorySlug: "visa-chau-a",
    flag: "üá∏üá¨",
    isActive: true,
    order: 4,
    createdAt: "2024-01-01T00:00:00Z", 
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-005",
    name: "Th√°i Lan",
    slug: "thai-lan",
    categoryId: "cat-001",
    categoryName: "Visa Ch√¢u √Å", 
    categorySlug: "visa-chau-a",
    flag: "üáπüá≠",
    isActive: true,
    order: 5,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  // Ch√¢u √Çu
  {
    id: "country-006",
    name: "Anh Qu·ªëc",
    slug: "anh-quoc",
    categoryId: "cat-002",
    categoryName: "Visa Ch√¢u √Çu",
    categorySlug: "visa-chau-au",
    flag: "üá¨üáß",
    isActive: true,
    order: 1,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-007", 
    name: "ƒê·ª©c",
    slug: "duc",
    categoryId: "cat-002",
    categoryName: "Visa Ch√¢u √Çu",
    categorySlug: "visa-chau-au",
    flag: "üá©üá™",
    isActive: true,
    order: 2,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-008",
    name: "Ph√°p", 
    slug: "phap",
    categoryId: "cat-002",
    categoryName: "Visa Ch√¢u √Çu",
    categorySlug: "visa-chau-au",
    flag: "üá´üá∑",
    isActive: true,
    order: 3,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-009",
    name: "√Åo",
    slug: "ao",
    categoryId: "cat-002", 
    categoryName: "Visa Ch√¢u √Çu",
    categorySlug: "visa-chau-au",
    flag: "üá¶üáπ",
    isActive: true,
    order: 4,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-010",
    name: "√ù",
    slug: "y", 
    categoryId: "cat-002",
    categoryName: "Visa Ch√¢u √Çu",
    categorySlug: "visa-chau-au",
    flag: "üáÆüáπ",
    isActive: true,
    order: 5,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  // Ch√¢u M·ªπ
  {
    id: "country-011",
    name: "M·ªπ",
    slug: "my",
    categoryId: "cat-003",
    categoryName: "Visa Ch√¢u M·ªπ",
    categorySlug: "visa-chau-my", 
    flag: "üá∫üá∏",
    isActive: true,
    order: 1,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-012",
    name: "Canada",
    slug: "canada",
    categoryId: "cat-003",
    categoryName: "Visa Ch√¢u M·ªπ", 
    categorySlug: "visa-chau-my",
    flag: "üá®üá¶",
    isActive: true,
    order: 2,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  // Ch√¢u √öc
  {
    id: "country-013",
    name: "√öc",
    slug: "uc", 
    categoryId: "cat-004",
    categoryName: "Visa Ch√¢u √öc",
    categorySlug: "visa-chau-uc",
    flag: "üá¶üá∫",
    isActive: true,
    order: 1,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  },
  {
    id: "country-014",
    name: "New Zealand", 
    slug: "new-zealand",
    categoryId: "cat-004",
    categoryName: "Visa Ch√¢u √öc", 
    categorySlug: "visa-chau-uc",
    flag: "üá≥üáø",
    isActive: true,
    order: 2,
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-15T10:30:00Z"
  }
];

// Simulate network delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * API ƒë·ªÉ l·∫•y t·∫•t c·∫£ danh m·ª•c visa (c·ªë ƒë·ªãnh)
 */
export async function getVisaCategories(): Promise<VisaCategory[]> {
  await delay(300); // Simulate network delay
  return mockVisaCategories.filter(cat => cat.isActive).sort((a, b) => a.order - b.order);
}

/**
 * API ƒë·ªÉ l·∫•y t·∫•t c·∫£ visa countries k√®m th√¥ng tin category
 * ƒê√¢y l√† API ch√≠nh s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü layout ƒë·ªÉ pre-load data
 */
export async function getAllVisaCountries(): Promise<VisaCountryItem[]> {
  await delay(800); // Simulate API call delay
  
  return mockVisaCountries
    .filter(country => country.isActive)
    .sort((a, b) => {
      // Sort by category order first, then by country order
      if (a.categorySlug !== b.categorySlug) {
        const categoryA = mockVisaCategories.find(cat => cat.slug === a.categorySlug);
        const categoryB = mockVisaCategories.find(cat => cat.slug === b.categorySlug);
        return (categoryA?.order || 0) - (categoryB?.order || 0);
      }
      return a.order - b.order;
    });
}

/**
 * API ƒë·ªÉ l·∫•y visa countries theo category
 */
export async function getVisaCountriesByCategory(categorySlug: string): Promise<VisaCountryItem[]> {
  await delay(400); // Simulate network delay
  
  return mockVisaCountries
    .filter(country => country.categorySlug === categorySlug && country.isActive)
    .sort((a, b) => a.order - b.order);
}

/**
 * API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt m·ªôt country
 */
export async function getVisaCountryBySlug(categorySlug: string, countrySlug: string): Promise<VisaCountryItem | null> {
  await delay(200); // Simulate network delay
  
  const country = mockVisaCountries.find(
    country => country.categorySlug === categorySlug && 
               country.slug === countrySlug && 
               country.isActive
  );
  
  return country || null;
}

/**
 * Utility function ƒë·ªÉ group countries theo category
 */
export function groupCountriesByCategory(countries: VisaCountryItem[]): Record<string, VisaCountryItem[]> {
  return countries.reduce((acc, country) => {
    if (!acc[country.categorySlug]) {
      acc[country.categorySlug] = [];
    }
    acc[country.categorySlug].push(country);
    return acc;
  }, {} as Record<string, VisaCountryItem[]>);
}

/**
 * API search function (c√≥ th·ªÉ d√πng sau n√†y)
 */
export async function searchVisaCountries(query: string): Promise<VisaCountryItem[]> {
  await delay(600);
  
  const lowerQuery = query.toLowerCase();
  return mockVisaCountries
    .filter(country => 
      country.isActive && (
        country.name.toLowerCase().includes(lowerQuery) ||
        country.categoryName.toLowerCase().includes(lowerQuery)
      )
    )
    .sort((a, b) => a.name.localeCompare(b.name));
}
