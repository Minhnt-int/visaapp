// Contact Form API functions

export interface ContactFormData {
  fullName: string;
  phone: string;
  email: string;
  visaCountry: string;
  visaType: string;
  departureDate: string;
  message: string;
  source: string; // Ngu·ªìn ƒë·∫øn (website, facebook, etc.)
}

export interface ContactFormResponse {
  success: boolean;
  message: string;
  data?: {
    id: string;
    submittedAt: string;
    estimatedResponseTime: string;
  };
  error?: string;
}

// Simulate network delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * Fake API to submit contact form
 */
export async function submitContactForm(formData: ContactFormData): Promise<ContactFormResponse> {
  await delay(2000); // Simulate API call delay

  // Simulate random success/failure (90% success rate)
  const isSuccess = Math.random() > 0.1;

  if (!isSuccess) {
    return {
      success: false,
      message: "C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.",
      error: "SERVER_ERROR"
    };
  }

  // Generate fake response data
  const submissionId = `REQ_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const submittedAt = new Date().toISOString();
  const estimatedResponseTime = new Date(Date.now() + 2 * 60 * 60 * 1000).toLocaleString('vi-VN'); // 2 hours from now

  console.log('üìù Contact form submitted:', {
    id: submissionId,
    customerInfo: {
      name: formData.fullName,
      phone: formData.phone,
      email: formData.email
    },
    visaRequest: {
      country: formData.visaCountry,
      type: formData.visaType,
      departureDate: formData.departureDate
    },
    message: formData.message,
    source: formData.source,
    submittedAt
  });

  return {
    success: true,
    message: `C·∫£m ∆°n ${formData.fullName}! Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin c·ªßa b·∫°n. Chuy√™n vi√™n t∆∞ v·∫•n s·∫Ω li√™n h·ªá trong v√≤ng 2 gi·ªù.`,
    data: {
      id: submissionId,
      submittedAt,
      estimatedResponseTime
    }
  };
}

/**
 * Validate form data before submission
 */
export function validateContactForm(formData: Partial<ContactFormData>): string[] {
  const errors: string[] = [];

  if (!formData.fullName?.trim()) {
    errors.push("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n");
  }

  if (!formData.phone?.trim()) {
    errors.push("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i");
  } else if (!/^[0-9+\-\s()]{8,15}$/.test(formData.phone.trim())) {
    errors.push("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
  }

  if (!formData.email?.trim()) {
    errors.push("Vui l√≤ng nh·∫≠p email");
  } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email.trim())) {
    errors.push("Email kh√¥ng h·ª£p l·ªá");
  }

  if (!formData.visaCountry?.trim()) {
    errors.push("Vui l√≤ng ch·ªçn qu·ªëc gia visa");
  }

  if (!formData.visaType?.trim()) {
    errors.push("Vui l√≤ng ch·ªçn lo·∫°i visa");
  }

  return errors;
}
